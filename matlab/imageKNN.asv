function [cerror,accuracymodel, tmpidx]   = trainKNN(DATA, rngesus)

%Setting the labels [1, 1, ..., 3, 3]
tmpvalue = 80;
label = ones(tmpvalue,1);
label((tmpvalue/2 +1):tmpvalue) = 3;


%Initilize the data for random pick
COKTrainData = DATA(1:50,:);
ADKTrainData = DATA(51:100,:);

%randomly sample from data, without replacment
[randomCOKTrainData, idxCO] = datasample(COKTrainData, tmpvalue/2, 'Replace', false);
[randomADKTrainData, idxAD] = datasample(ADKTrainData, tmpvalue/2, 'Replace', false);

%first the control then the AD in random sample
randomKTrainData = [randomCOKTrainData; randomADKTrainData];


 figure(1)
classError = zeros(20,1);
for k = 1:20
    KNNMdl = fitcknn(randomKTrainData,label,'Distance','euclidean',...
        'NumNeighbors',k,'Standardize',0);
    rng(rngesus); % For reproducibility
    CVKNNMdl = crossval(KNNMdl);
    classError(k) = kfoldLoss(CVKNNMdl);
end
 plot(classError)

%finding the smallest index error
[cerror, II] = min(classError);
tmpidx = [idxCO'; (idxAD'+50)];

%------



% accuracy = zeros(20,1);
% for k = 1:20
%     KNNMdl = fitcknn(randomKTrainData,label,'Distance','euclidean',...
%             'NumNeighbors',k,'Standardize',0);
% 
%     bib = [idxCO'; (idxAD'+50)];
% 
%     restKTrainData = DATA;
%     restKTrainData(bib, :) = [];
% 
%     tmpvec = 1:100;
%     tmpvec(bib) = [];
% 
%     tmpidx = ones(100,1);
%     tmpidx(51:100) = 3;
% 
%     restLABELS = tmpidx(tmpvec);
%     
% 
%     tmppredict = zeros(20,1);
%     for i = 1:20
%         predictTEST = predict(KNNMdl, restKTrainData(i,:));
%         tmppredict(i) = predictTEST == restLABELS(i);
%     end
% 
%     accuracy(k) = sum(tmppredict)/length(tmppredict);
% end
% plot(accuracy)
